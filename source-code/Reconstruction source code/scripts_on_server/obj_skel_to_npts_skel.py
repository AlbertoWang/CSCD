import sys
import os
import os.path
import argparse
import subprocess
import configparser

def obj_to_npts_in_batch(obj_dir, npts_dir, inter_ratio):
    for _, _, files in os.walk(obj_dir):
        for file_name in files:
            if not file_name.endswith('.obj'): continue
            obj_file_path = obj_dir + '/' + file_name
            npts_file_path = npts_dir + '/' + file_name[:-4] + '_skel.npts' 
            if os.path.isfile(npts_file_path): continue
            subprocess.call(('./skeleton_graph_to_skeletal_points %s %s %f ' % (obj_file_path, npts_file_path, inter_ratio)).split())
            #npts_to_ply(npts_file_path, ply_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully convert %s to %s  ...' % (obj_file_path, npts_file_path ))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass




if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--obj_dir', type=str, default='mesh_skel', help='the directory of imported skeleton(generated by generate_tree_models.py, obj type)')
    parser.add_argument('--npts_skel_dir', type=str, default='npts_skel', help='the directory of generated skeletal point cloud')
    parser.add_argument('--inter_ratio', type=float, default=0.9, help='how many points are interpolated into every each two adjacent vertices')
    #parser.add_argument('--config_dir', type=str, default='config', help='the directory of configs(used to config how scanner works)')
    argument_vals = parser.parse_args()
    obj_to_npts_in_batch(argument_vals.obj_dir, argument_vals.npts_skel_dir, argument_vals.inter_ratio)
    #npts_to_ply_in_batch(argument_vals.scan_npts_noise_dir, argument_vals.scan_ply_noise_dir, argument_vals.keyword)
    #sample_mesh(argument_vals.mpu_dir, argument_vals.npts_dir, argument_vals.pts_num)
    pass
