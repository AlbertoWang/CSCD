import numpy as np
import polyscope as ps
import os

def read_points_from_file(file_name):
    try:
        with open(file_name) as f_in:
            points = np.zeros((len(f_in.readlines()), 3))
            f_in.seek(0)
            points = postfix_read_filter(file_name, f_in, points)
        f_in.close()
    except expression as identifier:
        print('Read file err!')
        return
    finally:
        return points

def postfix_read_filter(file_name, f_in, points):
    if os.path.splitext(file_name)[-1] == '.obj':
        for i, line in enumerate(f_in):
            xyz_coordinate = line.split(' ')
            points[i] = np.array([float(xyz_coordinate[1]), float(xyz_coordinate[2]), float(xyz_coordinate[3])])
    elif os.path.splitext(file_name)[-1] == '.npts':
        for i, line in enumerate(f_in):
            xyz_coordinate = line.split(' ')
            points[i] = np.array([float(xyz_coordinate[0]), float(xyz_coordinate[1]), float(xyz_coordinate[2])])
    elif os.path.splitext(file_name)[-1] == '.ply':
        flag = False
        for i, line in enumerate(f_in):
            xyz_coordinate = line.split(' ')
            if flag == True and len(xyz_coordinate) == 3:
                points[i] = np.array([float(xyz_coordinate[0]), float(xyz_coordinate[1]), float(xyz_coordinate[2])])
            if line == 'end_header\n':
                flag = True
    return points

def postfix_write_filter(file_name, f_out, points):
    if os.path.splitext(file_name)[-1] == '.obj':
        for xyz_coordinate in points:
            f_out.write('v %s %s %s\n' % (xyz_coordinate[0], xyz_coordinate[1], xyz_coordinate[2]))
    elif os.path.splitext(file_name)[-1] == '.npts':
        for xyz_coordinate in points:
            f_out.write('%s %s %s\n' % (xyz_coordinate[0], xyz_coordinate[1], xyz_coordinate[2]))
    elif os.path.splitext(file_name)[-1] == '.ply':
        f_out.write('ply\nformat ascii 1.0\ncomment generated by PyPointCloud\nelement vertex %d\nproperty float x\nproperty float y\nproperty float z\nend_header\n' % (points.size / 3))
        for xyz_coordinate in points:
            f_out.write('%s %s %s\n' % (xyz_coordinate[0], xyz_coordinate[1], xyz_coordinate[2]))

def write_to_file(points, target_obj_file_name):
    try:
        with open(target_obj_file_name, 'w') as f_out:
            postfix_write_filter(target_obj_file_name, f_out, points)
        f_out.close()
    except expression as identifier:
        print('Write file err!')
        return False
    finally:
        return True

def show_points(points):
    ps.init()
    ps.register_point_cloud("points", points)
    ps_points = ps.get_point_cloud("points")
    ps_points.set_radius(0.0015)
    ps.show()

points = read_points_from_file('/Users/alberto/学习/点云处理/创作论文/mesh重建/实验数据/14/14-points.npts')
result = write_to_file(points, '/Users/alberto/学习/点云处理/创作论文/mesh重建/实验数据/14/14-points.obj')
# show_points(points)