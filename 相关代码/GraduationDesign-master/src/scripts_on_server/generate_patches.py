import sys
import os
import os.path
import argparse
import subprocess
import configparser

def generate_scan_patch(selected_models, scan_dir, seed_dir, patch_dir, sample_num):
    if selected_models is None:
        print("Error: selected models is None,")
        return
    for _, _, files in os.walk(scan_dir):
        for file_name in files:
            if not file_name.endswith('.npts'): continue
            scan_file_path = scan_dir + '/' + file_name
            seed_file_path = seed_dir + '/' + file_name[:-5] + '.npts'
            output_patch_file_path_stencil = patch_dir + '/' + file_name[:-5] 
            skel_file_path = file_name[:-5] + '.obj'
            if skel_file_path not in selected_models: continue
            if not os.path.isfile(seed_file_path): 
                print('Warning: cannot find seed file: ' + seed_file_path)
                continue
            subprocess.call(('./read_seeds_and_sample_pc %s %s %s %d' % (scan_file_path, seed_file_path, output_patch_file_path_stencil, sample_num)).split())
            #npts_to_ply(npts_file_path, ply_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully make patches from %s...' % (scan_file_path))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass


def generate_seeds_and_skel_patch(model_list_file, skel_dir, seed_dir, patch_dir, patch_num, sample_num, inter_ratio):
    if not os.path.isfile(model_list_file):
        print("Error: cannot file model list file: " + model_list_file)
        return
    selected_models = []
    with open(model_list_file) as m:
        for line in m.readlines():
            if line[-1] == '\n': line = line[:-1]
            if line.endswith('.obj'):
                selected_models.append(line)
            else:
                print("Warning: ignore line: " + line)
            pass 
        pass
    for _, _, files in os.walk(skel_dir):
        for file_name in files:
            if not file_name.endswith('.obj'): continue
            if file_name not in selected_models: continue
            obj_file_path = skel_dir + '/' + file_name
            output_seed_file_path_stencil = seed_dir + '/' + file_name[:-4] + '.npts'
            output_patch_file_path_stencil = patch_dir + '/' + file_name[:-4] 
            subprocess.call(('./select_seeds_and_sample_gt %s %s %s %d %d %f' % (obj_file_path, output_seed_file_path_stencil, output_patch_file_path_stencil, patch_num, sample_num, inter_ratio)).split())
            #npts_to_ply(npts_file_path, ply_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully convert %s to %s, %s ...' % (obj_file_path, output_seed_file_path_stencil, output_patch_file_path_stencil))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            sys.stdout.flush()
        pass 
    return selected_models



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--model_list', type=str, default='models_selected.list', help='the list of selected models')
    parser.add_argument('--skel_dir', type=str, default='mesh_skel_mpu_size', help='the directory of resized skeleton(generated by normalize_skel_with_mpu_size)')
    parser.add_argument('--skel_inter_ratio', type=float, default=0.9, help='the interpolation ratio used to determine how many poins are interpolated into every two adjacent skeleton points(argument used by select_seeds_and_sample_gt)')
    parser.add_argument('--pc_dir', type=str, default='gt_npts', help='the directory of point cloud(generated by implicit_uniform OR uniform_sample)')
    parser.add_argument('--pc_patch_dir', type=str, default='patch_pc', help='the directory of generated patches(generated by read_seed_and_sample_pc)')
    parser.add_argument('--seed_dir', type=str, default='seed', help='the directory of seeds file(generated by select_seeds_and_sample_gt)')
    parser.add_argument('--skel_patch_dir', type=str, default='patch_skel', help='the directory of raw skeleton(generated by select_seeds_and_sample_gt)')
    parser.add_argument('--patch_num', type=int, default=100, help='the num of patches for each model')
    parser.add_argument('--samples_per_pc_patch', type=int, default=256, help='the num of sample point for each point cloud patch')
    parser.add_argument('--samples_per_skel_patch', type=int, default=1024, help='the num of sample point for each skeleton patch')
    #parser.add_argument('--ply_pc_dir', type=str, default='gt_ply_pc', help='the directory of the output point cloud')
    argument_vals = parser.parse_args()
    selected_models = generate_seeds_and_skel_patch(argument_vals.model_list, argument_vals.skel_dir, argument_vals.seed_dir, argument_vals.skel_patch_dir, argument_vals.patch_num, argument_vals.samples_per_skel_patch, argument_vals.skel_inter_ratio)
    generate_scan_patch(selected_models, argument_vals.pc_dir, argument_vals.seed_dir, argument_vals.pc_patch_dir, argument_vals.samples_per_pc_patch)
    #sample_mesh(argument_vals.mpu_dir, argument_vals.npts_dir, argument_vals.pts_num)
    pass
