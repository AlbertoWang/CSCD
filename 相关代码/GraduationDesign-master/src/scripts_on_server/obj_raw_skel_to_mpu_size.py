import sys
import os
import os.path
import argparse
import subprocess
import configparser

def add_occlusion_in_batch(npts_dir, occlusion_range):
    pass

def add_noise_in_batch(npts_dir, noise_npts_dir, noise_ratio, noise_range, keyword, keyword2):
    for _, _, files in os.walk(npts_dir):
        for file_name in files:
            if not file_name.endswith('.npts'): continue
            if file_name.find(keyword) < 0: continue
            if file_name.find(keyword2) < 0: continue
            npts_file_path = npts_dir + '/' + file_name
            noise_npts_file_path = noise_npts_dir + '/' + file_name[:-5] + ('_noise_%d_%d.npts' % (int(noise_ratio * 100), int(noise_range * 100)))
            if os.path.isfile(noise_npts_file_path): continue
            subprocess.call(('./generate_gaussian_noise %s %s %f %f' % (npts_file_path, noise_npts_file_path, noise_ratio, noise_range)).split())
            #npts_to_ply(npts_file_path, ply_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully add noise for %s  ...' % (npts_file_path ))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass
    pass


def resize_skel_in_batch(mesh_dir, skel_dir, resized_skel_dir):
    for _, _, files in os.walk(skel_dir):
        for file_name in files:
            if not file_name.endswith('.obj'): continue
            # if file_name.find(keyword) < 0: continue
            obj_file_path = skel_dir + '/' + file_name
            ply_file_path = mesh_dir + '/' + file_name[:-4] + '.ply'
            output_skel_file_path = resized_skel_dir + '/' + file_name[:-4] + '.obj'
            subprocess.call(('./normalize_skel_with_mpu_size %s %s %s' % (ply_file_path, obj_file_path, output_skel_file_path)).split())
            #npts_to_ply(npts_file_path, ply_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully convert %s to %s ...' % (obj_file_path, output_skel_file_path))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    #parser.add_argument('--ply_dir', type=str, default='mesh', help='the directory of generated meshes(generated by generated_tree_models.py)')
    parser.add_argument('--mesh_dir', type=str, default='mesh', help='the directory of raw skeleton(generated by blender)')
    parser.add_argument('--skel_dir', type=str, default='mesh_skel', help='the directory of raw skeleton(generated by blender)')
    parser.add_argument('--output_skel_dir', type=str, default='mesh_skel_mpu_size', help='the directory of resized skeleton(generated by normalize_skel_with_mpu_size, resize to the bounding box, -37.5 ~ + 37.5)')
    #parser.add_argument('--ply_pc_dir', type=str, default='gt_ply_pc', help='the directory of the output point cloud')
    argument_vals = parser.parse_args()
    resize_skel_in_batch(argument_vals.mesh_dir, argument_vals.skel_dir, argument_vals.output_skel_dir)
    #sample_mesh(argument_vals.mpu_dir, argument_vals.npts_dir, argument_vals.pts_num)
    pass
