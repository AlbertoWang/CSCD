import sys
import os
import os.path
import argparse
import subprocess
import configparser


def add_occlusion_in_batch(npts_dir, missing_npts_dir, occlusion_cnt, occlusion_range, keyword):
    for _, _, files in os.walk(npts_dir):
        for file_name in files:
            if not file_name.endswith('.npts'): continue
            if file_name.find(keyword) < 0: continue
            npts_file_path = npts_dir + '/' + file_name
            missing_npts_file_path = missing_npts_dir + '/' + file_name[:-5] + ('_missing_%d_%d.npts' % (occlusion_cnt, int(occlusion_range * 100)))
            if os.path.isfile(missing_npts_file_path): continue
            subprocess.call(('./generate_occlusion %s %s %d %f' % (npts_file_path, missing_npts_file_path, occlusion_cnt, occlusion_range)).split())
            #npts_to_ply(npts_file_path, ply_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully add occlusions for %s  ...' % (npts_file_path ))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass


def npts_to_ply(file_name, output_file_name):
    if not file_name.endswith('.npts'):
        print('The name of file should end with .npts')
        return
    pts_lines = []
    with open(output_file_name, mode='w') as wf:
        with open(file_name) as rf:
            lines = rf.readlines()
            for line in lines:
                if len(line) > 1 and line.find('nan') < 0:
                    pts_lines.append(line)
                    pass
        wf.write('ply\n')
        wf.write('format ascii 1.0\n')
        wf.write('element vertex %d\n' % len(pts_lines))
        wf.write('property float x\n')
        wf.write('property float y\n')
        wf.write('property float z\n')
        wf.write('property float nx\n')
        wf.write('property float ny\n')
        wf.write('property float nz\n')
        wf.write('end_header\n')
        for line in pts_lines:
            wf.write(line)
    pass

def npts_to_ply_in_batch(npts_dir, ply_dir):
    for _, _, files in os.walk(npts_dir):
        for file_name in files:
            if not file_name.endswith('.npts'): continue
            npts_file_path = npts_dir + '/' + file_name
            ply_file_path = ply_dir + '/' + file_name[:-5] + '.ply'
            npts_to_ply(npts_file_path, ply_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully convert %s to %s ...' % (npts_file_path, ply_file_path))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--scan_npts_dir', type=str, default='scan_npts', help='the directory of generated scans(generated by uniform_sampler)')
    parser.add_argument('--scan_npts_missing_dir', type=str, default='scan_npts_missing', help='the directory of generated scans with occlusion(npts format)')
    parser.add_argument('--scan_ply_missing_dir', type=str, default='scan_ply_missing', help='the directory of generated scans with occlusion(ply format)')
    #parser.add_argument('--ply_pc_dir', type=str, default='gt_ply_pc', help='the directory of the output point cloud')
    #parser.add_argument('--pts_num', type=int, default=10000, help='the number of points for each point cloud')
    #parser.add_argument('--translation_x', type=float, default=0.0, help='the x-coord of the translation')
    argument_vals = parser.parse_args()
    add_occlusion_in_batch(argument_vals.scan_npts_dir, argument_vals.scan_npts_missing_dir, 2, 0.5, "res_100")
    add_occlusion_in_batch(argument_vals.scan_npts_dir, argument_vals.scan_npts_missing_dir, 3, 0.9, "res_100")
    npts_to_ply_in_batch(argument_vals.scan_npts_missing_dir, argument_vals.scan_ply_missing_dir)
    #sample_mesh(argument_vals.mpu_dir, argument_vals.npts_dir, argument_vals.pts_num)
    pass
