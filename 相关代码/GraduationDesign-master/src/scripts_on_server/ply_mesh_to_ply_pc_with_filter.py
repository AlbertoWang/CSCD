import sys
import os
import os.path
import argparse
import subprocess

def npts_to_ply(file_name, output_file_name):
    if not file_name.endswith('.npts'):
        print('The name of file should end with .npts')
        return
    pts_lines = []
    with open(output_file_name, mode='w') as wf:
        with open(file_name) as rf:
            lines = rf.readlines()
            for line in lines:
                if len(line) > 1 and line.find('nan') < 0:
                    pts_lines.append(line)
                    pass
        wf.write('ply\n')
        wf.write('format ascii 1.0\n')
        wf.write('element vertex %d\n' % len(pts_lines))
        wf.write('property float x\n')
        wf.write('property float y\n')
        wf.write('property float z\n')
        wf.write('property float nx\n')
        wf.write('property float ny\n')
        wf.write('property float nz\n')
        wf.write('end_header\n')
        for line in pts_lines:
            wf.write(line)
    pass

def npts_to_ply_in_batch(npts_dir, ply_dir, keyword):
    for _, _, files in os.walk(npts_dir):
        for file_name in files:
            if not file_name.endswith('.npts'): continue
            if file_name.find(keyword) < 0: continue
            npts_file_path = npts_dir + '/' + file_name
            ply_file_path = ply_dir + '/' + file_name[:-5] + '.ply'
            npts_to_ply(npts_file_path, ply_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully convert %s to %s ...' % (npts_file_path, ply_file_path))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass

def convert_ply_2_mpu(mesh_dir, mpu_dir, keyword):
    for _, _, files in os.walk(mesh_dir):
        for file_name in files:
            if not file_name.endswith('.ply'): continue
            if file_name.find(keyword) < 0: continue
            ply_file_path = mesh_dir + '/' + file_name
            mpu_file_path = mpu_dir + '/' + file_name[:-4] + '.mpu'
            subprocess.call(('./mesh_to_implicit %s %s 6 0.008 1.0' % (ply_file_path, mpu_file_path)).split())
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully convert %s to %s ...' % (ply_file_path, mpu_file_path))
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass


def sample_mesh(mpu_dir, npts_dir, sample_cnt, keyword):
    for _, _, files in os.walk(mpu_dir):
        for file_name in files:
            if not file_name.endswith('.mpu'): continue
            if file_name.find(keyword) < 0: continue
            mpu_file_path = mpu_dir + '/' + file_name
            npts_file_path = npts_dir + '/' + file_name[:-4] + '.npts'
            subprocess.call(('./implicit_uniform %s %d' % (mpu_file_path, sample_cnt)).split())
            subprocess.call(('cp particles.npts %s' % npts_file_path).split())
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
            print('Successfully sample on %s ...' % mpu_file_path)
            print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        pass 
    pass


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--ply_dir', type=str, default='mesh', help='the directory of generated meshes(generated by generated_tree_models.py)')
    parser.add_argument('--mpu_dir', type=str, default='mpu', help='the directory of generated mpu(generated by mesh_to_implicit)')
    parser.add_argument('--npts_dir', type=str, default='gt_npts', help='the directory of generated mpu(generated by implicit_uniform)')
    parser.add_argument('--ply_pc_dir', type=str, default='gt_ply', help='the directory of the output point cloud')
    parser.add_argument('--keyword', type=str, default="small", help='the keyword to filter ply files')
    parser.add_argument('--pts_num', type=int, default=10000, help='the number of points for each point cloud')
    #parser.add_argument('--translation_x', type=float, default=0.0, help='the x-coord of the translation')
    argument_vals = parser.parse_args()
    convert_ply_2_mpu(argument_vals.ply_dir, argument_vals.mpu_dir, argument_vals.keyword)
    sample_mesh(argument_vals.mpu_dir, argument_vals.npts_dir, argument_vals.pts_num, argument_vals.keyword)
    npts_to_ply_in_batch(argument_vals.npts_dir, argument_vals.ply_pc_dir, argument_vals.keyword)
    #fn_main(sys.argv)
